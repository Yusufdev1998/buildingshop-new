// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType  {
    ADMIN
    RETAILER
}

model User {
    id Int @id @default(autoincrement())
    name String
    login String @unique
    password String
    branch String? @unique
    branch_name Branch? @relation(name: "branch_name", fields: [branch], references: [name])
    user_type UserType
    user_id Int? 
    brands Brand[]
    product_types ProductType[]
    product_measures ProductMeasure[]
    branches Branch[]
    products Products[]
    sales Sale[]
    withdraws WithdrawBuilder[]
}

model Brand {
    id Int @id @default(autoincrement())
    name String @unique
    user_id Int 
    products Products[]
    user User @relation(fields: [user_id], references: [id])
}

model ProductType {
    id Int @id @default(autoincrement())
    name String @unique
    user_id Int 
    products Products[]
    user User @relation(fields: [user_id], references: [id])
}
model ProductMeasure {
    id Int @id @default(autoincrement())
    name String @unique
    user_id Int 
    products Products[]
    user User @relation(fields: [user_id], references: [id])
}

model Branch {
    id Int @id @default(autoincrement())
    name String @unique
    user_id Int 
    user User @relation(fields: [user_id], references: [id])
    user_in_branch User? @relation(name: "branch_name")
}

model Products {
    id Int @id @default(autoincrement())
    name String
    price Int
    ball Int @default(0)
    brend_name String 
    product_type_name String
    product_measure_name String
    product_measure ProductMeasure @relation(fields: [product_measure_name], references: [name])
    product_type ProductType @relation(fields: [product_type_name], references: [name])
    brend Brand @relation(fields: [brend_name], references: [name])
    user_id Int 
    user User @relation(fields: [user_id], references: [id])
}

model Builder {
  id Int @id @default(autoincrement())
  first_name String  
  last_name String 
  phone_number String  @unique
  extra_phone String? 
  region String 
  address String 
  date_of_birth String 
  password String 
  img_url String?
  ball Int @default(0)
  withdraws WithdrawBuilder[]
  sales Sale[]
}

enum SaleType {
  SOLD
  RETURN
}
model Sale {
  id Int @id @default(autoincrement())
  builder_id Int
  builder Builder @relation(fields: [builder_id], references: [id])
  branch String?
  sold_products Json 
  total_summa Int
  total_ball Int 
  sale_type SaleType 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user_id Int 
  user User @relation(fields: [user_id], references: [id])
}

model WithdrawBuilder {
  id Int @id @default(autoincrement())
  builder_id Int
  builder Builder @relation(fields: [builder_id], references: [id])
  ball Int 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt 
  user_id Int 
  user User @relation(fields: [user_id], references: [id])
}